{"version":3,"sources":["bingKmlParser.ts"],"names":[],"mappings":"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","file":"BingKmlParser.js","sourcesContent":["namespace com.koldyr {\n\n    interface IStyleMap {\n        normal: any;\n        highlight: any;\n    }\n\n    interface IStyleDTO {\n        styleMap?: IStyleMap;\n        options?: any;\n    }\n\n    export class BingKmlParser {\n\n        static ICON_URL: string = 'https://www.bingmapsportal.com/Content/images/poi_custom.png';\n\n        private styles: any = {};\n\n        private styleMap: any = {};\n\n        /**\n         * @param placemarkXml\n         * @returns {Array}\n         */\n        private parsePlacemark(placemarkXml: Element): Array<Microsoft.Maps.IPrimitive> {\n            const placemarkDom: JQuery = $(placemarkXml);\n\n            const geometries: Array<Microsoft.Maps.IPrimitive> = [];\n\n            const pushpins: Microsoft.Maps.Pushpin = this.parsePushpin(placemarkDom);\n            if (pushpins) {\n                geometries.push(pushpins);\n            }\n\n            const lines: Microsoft.Maps.Polyline = this.parseLine(placemarkDom);\n            if (lines) {\n                geometries.push(lines);\n            }\n\n            const polygons: Microsoft.Maps.Polygon = this.parsePolygon(placemarkDom);\n            if (polygons) {\n                geometries.push(polygons);\n            }\n\n            const multiGeometries: Array<Microsoft.Maps.IPrimitive> = this.parseMultiGeometry(placemarkDom);\n            if (multiGeometries) {\n                $.each(multiGeometries, (index: number, item: Microsoft.Maps.IPrimitive) => {\n                    geometries.push(item);\n                });\n            }\n\n            return geometries;\n        }\n\n        private parsePushpin(placemarkDom: JQuery, pointDom?: JQuery): Microsoft.Maps.Pushpin {\n            let point: JQuery;\n\n            try {\n                if (pointDom) {\n                    point = pointDom;\n                } else {\n                    point = placemarkDom.find('Point');\n                    if (point.length === 0) {\n                        return null;\n                    }\n                }\n\n                const coordinates: JQuery = point.find('coordinates');\n                const vertices: Array<Microsoft.Maps.Location> = this.parseVertices(coordinates.text());\n\n                let styleDTO: IStyleDTO = {\n                    options: {icon: BingKmlParser.ICON_URL, anchor: new Microsoft.Maps.Point(12, 39)}\n                };\n                if (placemarkDom) {\n                    styleDTO = this.getOptions(placemarkDom, styleDTO.options);\n                }\n\n                let pushpin: Microsoft.Maps.Pushpin;\n                if (styleDTO.styleMap) {\n                    pushpin = new Microsoft.Maps.Pushpin(vertices[0], styleDTO.styleMap.normal);\n                    this.addMappedStyle(pushpin, styleDTO.styleMap);\n                } else {\n                    pushpin = new Microsoft.Maps.Pushpin(vertices[0], styleDTO.options);\n                }\n                return pushpin;\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        private parseLine(placemarkDom: JQuery, lineDom?: JQuery): Microsoft.Maps.Polyline {\n            try {\n                let line: JQuery;\n                if (lineDom) {\n                    line = lineDom;\n                } else {\n                    line = placemarkDom.find('LineString');\n                    if (line.length === 0) {\n                        return null;\n                    }\n                }\n\n                const coordinates: JQuery = line.find('coordinates');\n                const vertices: Array<Microsoft.Maps.Location> = this.parseVertices(coordinates.html());\n\n                let styleDTO: IStyleDTO = {\n                    options: {\n                        strokeColor: 'black', strokeThickness: 1\n                    }\n                };\n                if (placemarkDom) {\n                    styleDTO = this.getOptions(placemarkDom, styleDTO.options);\n                }\n\n                let polyline: Microsoft.Maps.Polyline;\n                if (styleDTO.styleMap) {\n                    polyline = new Microsoft.Maps.Polyline(vertices, styleDTO.styleMap.normal);\n                    this.addMappedStyle(polyline, styleDTO.styleMap);\n                } else {\n                    polyline = new Microsoft.Maps.Polyline(vertices, styleDTO.options);\n                }\n                return polyline;\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        private parsePolygon(placemarkDom: JQuery, polygonDom?: JQuery): Microsoft.Maps.Polygon {\n            try {\n                let polygon: JQuery;\n                if (polygonDom) {\n                    polygon = polygonDom;\n                } else {\n                    polygon = placemarkDom.find('Polygon');\n                    if (polygon.length === 0) {\n                        return null;\n                    }\n                }\n                const coordinates: JQuery = polygon.find('coordinates');\n                const vertices: Array<Microsoft.Maps.Location> = this.parseVertices(coordinates.html());\n\n                let styleDTO: IStyleDTO = {\n                    options: {\n                        strokeColor: 'black',\n                        strokeThickness: 1\n                    }\n                };\n\n                if (placemarkDom) {\n                    styleDTO = this.getOptions(placemarkDom, styleDTO.options);\n                }\n\n                let msPolygon: Microsoft.Maps.Polygon;\n                if (styleDTO.styleMap) {\n                    msPolygon = new Microsoft.Maps.Polygon(vertices, styleDTO.styleMap.normal);\n                    this.addMappedStyle(msPolygon, styleDTO.styleMap);\n                } else {\n                    msPolygon = new Microsoft.Maps.Polygon(vertices, styleDTO.options);\n                }\n                return msPolygon;\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        private parseMultiGeometry(placemarkDom: JQuery): Array<Microsoft.Maps.IPrimitive> {\n            const multiGeometryDom: JQuery = placemarkDom.find('MultiGeometry');\n            if (multiGeometryDom.length === 0) {\n                return null;\n            }\n\n            const geometries: Array<Microsoft.Maps.IPrimitive> = [];\n            multiGeometryDom.find('Point').each((index: number, item: Element) => {\n                geometries.push(this.parsePushpin(null, $(item)));\n            });\n\n            multiGeometryDom.find('LineString').each((index: number, item: Element) => {\n                geometries.push(this.parseLine(null, $(item)));\n            });\n\n            multiGeometryDom.find('Polygon').each((index: number, item: Element) => {\n                geometries.push(this.parsePolygon(null, $(item)));\n            });\n\n            return geometries;\n        }\n\n        private parseVertices(coordinateString: string): Array<Microsoft.Maps.Location> {\n            const coordinates: Array<string> = $.trim(coordinateString).split(' ');\n            const msLocations: Array<Microsoft.Maps.Location> = [];\n\n            for (let i = 0; i < coordinates.length; i++) {\n                const coordinate = $.trim(coordinates[i]);\n\n                if (coordinate.length === 0) {\n                    continue;\n                }\n\n                const xyz: Array<string> = coordinate.split(',');\n                const location = new Microsoft.Maps.Location(xyz[1], xyz[0]);\n                msLocations.push(location);\n            }\n\n            return msLocations;\n        }\n\n        /**\n         * Parse a KML color string that comes as a abgr hex string.\n         * @param kmlColorString An abgr hex string\n         * @return {Microsoft.Maps.Color}\n         * @private\n         */\n        private parseColor(kmlColorString: string): Microsoft.Maps.Color {\n            // Our KML files have color strings as hex in abgr order. Here we swap them to argb order.\n            const hexArray = [kmlColorString.charAt(0) + kmlColorString.charAt(1),\n                kmlColorString.charAt(6) + kmlColorString.charAt(7),\n                kmlColorString.charAt(4) + kmlColorString.charAt(5),\n                kmlColorString.charAt(2) + kmlColorString.charAt(3)];\n\n            const argbArray: number[] = [];\n            for (let i = 0; i < hexArray.length; i++) {\n                argbArray.push(parseInt(hexArray[i], 16));\n            }\n\n            return new Microsoft.Maps.Color(argbArray[0], argbArray[1], argbArray[2], argbArray[3]);\n        }\n\n        private parseStyle(styleDom: JQuery): Microsoft.Maps.IPrimitiveOptions {\n            const styleOptions: any = {};\n\n            const polyStyle = styleDom.find('PolyStyle');\n            if (polyStyle.length > 0) {\n                const color = polyStyle.find('color');\n                if (color.length > 0) {\n                    styleOptions.fillColor = this.parseColor(color.html());\n                }\n            }\n\n            const lineStyle = styleDom.find('LineStyle');\n            if (lineStyle.length > 0) {\n                const color = lineStyle.find('color');\n                if (color.length > 0) {\n                    styleOptions.strokeColor = this.parseColor(color.html());\n                }\n                const width = lineStyle.find('width');\n                if (width.length > 0) {\n                    styleOptions.strokeThickness = parseInt(width.html(), 10);\n                }\n            }\n\n            const iconStyle = styleDom.find('IconStyle');\n            if (iconStyle.length > 0) {\n                const color = iconStyle.find('color');\n                if (color.length > 0) {\n                    styleOptions.color = color.html();\n                }\n\n                const icon = iconStyle.find('Icon');\n                if (icon.length > 0) {\n                    styleOptions.icon = icon.find('href').html();\n                }\n\n            }\n            return styleOptions;\n        }\n\n        /**\n         * Create a map of style names to styles (PolygonOptions - http://msdn.microsoft.com/en-us/library/gg427596.aspx).\n         * @param kmlDom\n         * @private\n         */\n        private parseStyles(kmlDom: JQuery): void {\n            kmlDom.find('Style').each((index: number, styleXml: Element) => {\n                const styleDom = $(styleXml);\n                const styleId: string = styleDom.attr('id');\n                this.styles[styleId] = this.parseStyle(styleDom);\n            });\n\n            kmlDom.find('StyleMap').each((index: number, styleMapXml: Element) => {\n                const styleMapDom = $(styleMapXml);\n                const styleMapId = styleMapDom.attr('id');\n                const mappedStyle: IStyleMap = this.parseStyleMap(styleMapDom);\n                this.styleMap[styleMapId] = mappedStyle;\n            });\n\n            console.log('Styles loaded');\n        }\n\n        private parseStyleMap(styleMapDom: JQuery): IStyleMap {\n            const styles: any = {};\n\n            const self = this;\n            styleMapDom.find('Pair').each((index: number, pair: Element) => {\n                const pairDom = $(pair);\n                const key = pairDom.find('key').html();\n                const style = pairDom.find('styleUrl').html().substr(1);\n                styles[key] = self.styles[style];\n            });\n\n            return styles;\n        }\n\n        private addMappedStyle(geometry: Microsoft.Maps.IPrimitive, mapped: IStyleMap): void {\n            if (!geometry.metadata) {\n                geometry.metadata = {};\n            }\n            geometry.metadata.styles = mapped;\n\n            Microsoft.Maps.Events.addHandler(geometry, 'mouseover', (event: Microsoft.Maps.IMouseEventArgs) => {\n                const target: Microsoft.Maps.IPrimitive = <Microsoft.Maps.IPrimitive>event.target;\n                target.setOptions(<Microsoft.Maps.IPrimitiveOptions>target.metadata.styles.highlight);\n            });\n            Microsoft.Maps.Events.addHandler(geometry, 'mouseout', (event: Microsoft.Maps.IMouseEventArgs) => {\n                const target: Microsoft.Maps.IPrimitive = <Microsoft.Maps.IPrimitive>event.target;\n                target.setOptions(<Microsoft.Maps.IPrimitiveOptions>target.metadata.styles.normal);\n            });\n        }\n\n        private getOptions(placemarkDom: JQuery, defaultOptions: any): IStyleDTO {\n            let styleMap: IStyleMap;\n\n            const styleUrlDom: JQuery = placemarkDom.find('styleUrl');\n            if (styleUrlDom.length > 0) {\n                const styleUrl = styleUrlDom.html();\n                let styleName = this.getStyleName(styleUrl);\n\n                if (this.isExternalStyle(styleUrl)) {\n                    this.loadExternalStyle(styleUrl);\n                }\n\n                defaultOptions = this.styleMap[styleName];\n\n                if (defaultOptions) {\n                    styleMap = <IStyleMap>defaultOptions;\n                } else {\n                    defaultOptions = this.styles[styleName];\n                }\n            } else {\n                const style = placemarkDom.find('Style');\n                if (style.length > 0) {\n                    defaultOptions = this.parseStyle(style);\n                }\n            }\n\n            const name = placemarkDom.find('name');\n            if (name.length > 0) {\n                console.log(name.html());\n                defaultOptions.title = name.html();\n            }\n            return {options: defaultOptions, styleMap: styleMap};\n        }\n\n        private getStyleName(styleUrl: string): string {\n            const index = styleUrl.lastIndexOf('#');\n            return styleUrl.substr(index + 1);\n        }\n\n        private isExternalStyle(styleUrl: string): boolean {\n            const index = styleUrl.lastIndexOf('#');\n            return index > 0;\n        }\n\n        private loadExternalStyle(styleUrl: string): void {\n            const styleName = this.getStyleName(styleUrl);\n            const style = this.styles[styleName];\n            if (style) {\n                return;\n            }\n\n            const index = styleUrl.lastIndexOf('#');\n            const externalKmlUrl = styleUrl.substring(0, index);\n\n            $.ajax({\n                url: externalKmlUrl,\n                async: false\n            }).then(\n                (data: any) => {\n                    const kmlContent = $(data);\n                    const externalStyles: JQuery = kmlContent.find('Style');\n                    for (let i = 0; i < externalStyles.length; i++) {\n                        const styleDom = $(externalStyles[i]);\n                        if (styleDom.attr('id') === styleName) {\n                            this.styles[styleName] = this.parseStyle(styleDom);\n                        }\n                    }\n                }\n            );\n        }\n\n        /**\n         * public functions that are available using this object.\n         */\n        public parse(kmlXml: Element): Array<Microsoft.Maps.IPrimitive> {\n            const kmlContent: Array<Microsoft.Maps.IPrimitive> = [];\n\n            const kmlDom = $(kmlXml);\n            this.parseStyles(kmlDom);\n\n            kmlDom.find('Placemark').each((index: number, placemarkXml: Element) => {\n                const placemarkGeometries: Array<Microsoft.Maps.IPrimitive> = this.parsePlacemark(placemarkXml);\n                if (placemarkGeometries) {\n                    $.each(placemarkGeometries, (j: number, item: Microsoft.Maps.IPrimitive) => {\n                        kmlContent.push(item);\n                    });\n                }\n            });\n\n            console.log('Geometry loaded');\n\n            return kmlContent;\n        }\n    }\n}\n"],"sourceRoot":"/source/"}