{"version":3,"sources":["bingKmlParser.ts"],"names":[],"mappings":"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","file":"BingKmlParser.js","sourcesContent":["namespace com.koldyr {\r\n\r\n    export interface IBingKmlResult {\r\n        geometries: Array<Microsoft.Maps.IPrimitive>;\r\n        overlays: Array<Microsoft.Maps.CustomOverlay>;\r\n    }\r\n\r\n    interface IStyleMap {\r\n        normal: any;\r\n        highlight: any;\r\n    }\r\n\r\n    interface IStyleDTO {\r\n        styleMap?: IStyleMap;\r\n        options?: any;\r\n    }\r\n\r\n    export interface IGroundOverlayOptions extends Microsoft.Maps.ICustomOverlayOptions {\r\n        name: string;\r\n        bounds: Microsoft.Maps.LocationRect;\r\n        image: string;\r\n    }\r\n\r\n    export class GroundOverlay extends Microsoft.Maps.CustomOverlay {\r\n\r\n        private options: IGroundOverlayOptions;\r\n        private img: HTMLImageElement;\r\n\r\n        constructor(options: IGroundOverlayOptions) {\r\n            super(options);\r\n            this.options = options;\r\n        }\r\n\r\n        public onAdd(): void {\r\n            this.img = document.createElement('img');\r\n            this.img.src = this.options.image;\r\n            this.img.style.width = '100%';\r\n            this.img.style.height = '100%';\r\n            this.img.style.position = 'absolute';\r\n            this.setHtmlElement(this.img);\r\n        }\r\n\r\n        public onRemove(): void {\r\n            this.setHtmlElement(null);\r\n        }\r\n\r\n        public onLoad(): void {\r\n            this.repositionOverlay();\r\n\r\n            const self = this;\r\n            Microsoft.Maps.Events.addHandler(this._map, 'viewchange', () => self.repositionOverlay());\r\n        }\r\n\r\n        private repositionOverlay(): void {\r\n            const topLeft: Microsoft.Maps.Point = <Microsoft.Maps.Point>this._map.tryLocationToPixel(this.options.bounds.getNorthwest(), Microsoft.Maps.PixelReference.control);\r\n            const bottomRight: Microsoft.Maps.Point = <Microsoft.Maps.Point>this._map.tryLocationToPixel(this.options.bounds.getSoutheast(), Microsoft.Maps.PixelReference.control);\r\n\r\n            this.img.style.left = topLeft.x + 'px';\r\n            this.img.style.top = topLeft.y + 'px';\r\n            this.img.style.width = (bottomRight.x - topLeft.x) + 'px';\r\n            this.img.style.height = (bottomRight.y - topLeft.y) + 'px';\r\n        }\r\n    }\r\n\r\n    export class BingKmlParser {\r\n\r\n        static ICON_URL: string = 'https://www.bingmapsportal.com/Content/images/poi_custom.png';\r\n\r\n        private styles: any = {};\r\n\r\n        private styleMap: any = {};\r\n\r\n        /**\r\n         * @param placemarkXml\r\n         * @returns {Array}\r\n         */\r\n        private parsePlacemark(placemarkXml: Element): Array<Microsoft.Maps.IPrimitive> {\r\n            const placemarkDom: JQuery = $(placemarkXml);\r\n\r\n            const geometries: Array<Microsoft.Maps.IPrimitive> = [];\r\n\r\n            const pushpins: Microsoft.Maps.Pushpin = this.parsePushpin(placemarkDom);\r\n            if (pushpins) {\r\n                geometries.push(pushpins);\r\n            }\r\n\r\n            const lines: Microsoft.Maps.Polyline = this.parseLine(placemarkDom);\r\n            if (lines) {\r\n                geometries.push(lines);\r\n            }\r\n\r\n            const polygons: Microsoft.Maps.Polygon = this.parsePolygon(placemarkDom);\r\n            if (polygons) {\r\n                geometries.push(polygons);\r\n            }\r\n\r\n            const multiGeometries: Array<Microsoft.Maps.IPrimitive> = this.parseMultiGeometry(placemarkDom);\r\n            if (multiGeometries) {\r\n                $.each(multiGeometries, (index: number, item: Microsoft.Maps.IPrimitive) => {\r\n                    geometries.push(item);\r\n                });\r\n            }\r\n\r\n            return geometries;\r\n        }\r\n\r\n        private parsePushpin(placemarkDom: JQuery, pointDom?: JQuery): Microsoft.Maps.Pushpin {\r\n            let point: JQuery;\r\n\r\n            try {\r\n                if (pointDom) {\r\n                    point = pointDom;\r\n                } else {\r\n                    point = placemarkDom.find('Point');\r\n                    if (point.length === 0) {\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n                const coordinates: JQuery = point.find('coordinates');\r\n                const vertices: Array<Microsoft.Maps.Location> = this.parseVertices(coordinates.text());\r\n\r\n                let styleDTO: IStyleDTO = {\r\n                    options: {icon: BingKmlParser.ICON_URL, anchor: new Microsoft.Maps.Point(12, 39)}\r\n                };\r\n                if (placemarkDom) {\r\n                    styleDTO = this.getOptions(placemarkDom, styleDTO.options);\r\n                }\r\n\r\n                let pushpin: Microsoft.Maps.Pushpin;\r\n                if (styleDTO.styleMap) {\r\n                    pushpin = new Microsoft.Maps.Pushpin(vertices[0], styleDTO.styleMap.normal);\r\n                    this.addMappedStyle(pushpin, styleDTO.styleMap);\r\n                } else {\r\n                    pushpin = new Microsoft.Maps.Pushpin(vertices[0], styleDTO.options);\r\n                }\r\n                return pushpin;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        private parseLine(placemarkDom: JQuery, lineDom?: JQuery): Microsoft.Maps.Polyline {\r\n            try {\r\n                let line: JQuery;\r\n                if (lineDom) {\r\n                    line = lineDom;\r\n                } else {\r\n                    line = placemarkDom.find('LineString');\r\n                    if (line.length === 0) {\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n                const coordinates: JQuery = line.find('coordinates');\r\n                const vertices: Array<Microsoft.Maps.Location> = this.parseVertices(coordinates.html());\r\n\r\n                let styleDTO: IStyleDTO = {\r\n                    options: {\r\n                        strokeColor: 'black', strokeThickness: 1\r\n                    }\r\n                };\r\n                if (placemarkDom) {\r\n                    styleDTO = this.getOptions(placemarkDom, styleDTO.options);\r\n                }\r\n\r\n                let polyline: Microsoft.Maps.Polyline;\r\n                if (styleDTO.styleMap) {\r\n                    polyline = new Microsoft.Maps.Polyline(vertices, styleDTO.styleMap.normal);\r\n                    this.addMappedStyle(polyline, styleDTO.styleMap);\r\n                } else {\r\n                    polyline = new Microsoft.Maps.Polyline(vertices, styleDTO.options);\r\n                }\r\n                return polyline;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        private parsePolygon(placemarkDom: JQuery, polygonDom?: JQuery): Microsoft.Maps.Polygon {\r\n            try {\r\n                let polygon: JQuery;\r\n                if (polygonDom) {\r\n                    polygon = polygonDom;\r\n                } else {\r\n                    polygon = placemarkDom.find('Polygon');\r\n                    if (polygon.length === 0) {\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n                let vertices: Array<any> = [];\r\n\r\n                const outerCoordinates: JQuery = polygon.find('outerBoundaryIs coordinates');\r\n                const outerVertices: Array<Microsoft.Maps.Location> = this.parseVertices(outerCoordinates.html());\r\n\r\n                const innerCoordinates: JQuery = polygon.find('innerBoundaryIs coordinates');\r\n                if (innerCoordinates.length > 0) {\r\n                    const innerVertices: Array<Microsoft.Maps.Location> = this.parseVertices(innerCoordinates.html());\r\n                    vertices.push(outerVertices);\r\n                    vertices.push(innerVertices);\r\n                } else {\r\n                    vertices = outerVertices;\r\n                }\r\n\r\n                let styleDTO: IStyleDTO = {\r\n                    options: {\r\n                        strokeColor: 'black',\r\n                        strokeThickness: 1\r\n                    }\r\n                };\r\n\r\n                if (placemarkDom) {\r\n                    styleDTO = this.getOptions(placemarkDom, styleDTO.options);\r\n                }\r\n\r\n                let msPolygon: Microsoft.Maps.Polygon;\r\n                if (styleDTO.styleMap) {\r\n                    msPolygon = new Microsoft.Maps.Polygon(vertices, styleDTO.styleMap.normal);\r\n                    this.addMappedStyle(msPolygon, styleDTO.styleMap);\r\n                } else {\r\n                    msPolygon = new Microsoft.Maps.Polygon(vertices, styleDTO.options);\r\n                }\r\n                return msPolygon;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        private parseMultiGeometry(placemarkDom: JQuery): Array<Microsoft.Maps.IPrimitive> {\r\n            const multiGeometryDom: JQuery = placemarkDom.find('MultiGeometry');\r\n            if (multiGeometryDom.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            const geometries: Array<Microsoft.Maps.IPrimitive> = [];\r\n            multiGeometryDom.find('Point').each((index: number, item: Element) => {\r\n                geometries.push(this.parsePushpin(null, $(item)));\r\n            });\r\n\r\n            multiGeometryDom.find('LineString').each((index: number, item: Element) => {\r\n                geometries.push(this.parseLine(null, $(item)));\r\n            });\r\n\r\n            multiGeometryDom.find('Polygon').each((index: number, item: Element) => {\r\n                geometries.push(this.parsePolygon(null, $(item)));\r\n            });\r\n\r\n            return geometries;\r\n        }\r\n\r\n        private parseGroundOverlay(groundOverlayXml: Element): Microsoft.Maps.CustomOverlay {\r\n            const groundOverlayDom: JQuery = $(groundOverlayXml);\r\n\r\n            const name: string = groundOverlayDom.find('name').text();\r\n            const iconUrl: string = groundOverlayDom.find('Icon href').text();\r\n\r\n            const latLonBox: JQuery = groundOverlayDom.find('LatLonBox');\r\n            const north: string = latLonBox.find('north').text();\r\n            const south: string = latLonBox.find('south').text();\r\n            const east: string = latLonBox.find('east').text();\r\n            const west: string = latLonBox.find('west').text();\r\n            //const rotation: string = latLonBox.find('rotation').text();\r\n\r\n            const bounds = Microsoft.Maps.LocationRect.fromEdges(parseInt(north, 10), parseInt(west, 10), parseInt(south, 10), parseInt(east, 10));\r\n            return new GroundOverlay({\r\n                name: name,\r\n                image: iconUrl,\r\n                bounds: bounds,\r\n                beneathLabels: false\r\n            });\r\n        }\r\n\r\n        private parseVertices(coordinateString: string): Array<Microsoft.Maps.Location> {\r\n            const coordinates: Array<string> = $.trim(coordinateString).split(' ');\r\n            const msLocations: Array<Microsoft.Maps.Location> = [];\r\n\r\n            for (let i = 0; i < coordinates.length; i++) {\r\n                const coordinate = $.trim(coordinates[i]);\r\n\r\n                if (coordinate.length === 0) {\r\n                    continue;\r\n                }\r\n\r\n                const xyz: Array<string> = coordinate.split(',');\r\n                const location = new Microsoft.Maps.Location(xyz[1], xyz[0]);\r\n                msLocations.push(location);\r\n            }\r\n\r\n            return msLocations;\r\n        }\r\n\r\n        /**\r\n         * Parse a KML color string that comes as a abgr hex string.\r\n         * @param kmlColorString An abgr hex string\r\n         * @return {Microsoft.Maps.Color}\r\n         * @private\r\n         */\r\n        private parseColor(kmlColorString: string): Microsoft.Maps.Color {\r\n            // Our KML files have color strings as hex in abgr order. Here we swap them to argb order.\r\n            const hexArray = [kmlColorString.charAt(0) + kmlColorString.charAt(1),\r\n                kmlColorString.charAt(6) + kmlColorString.charAt(7),\r\n                kmlColorString.charAt(4) + kmlColorString.charAt(5),\r\n                kmlColorString.charAt(2) + kmlColorString.charAt(3)];\r\n\r\n            const argbArray: number[] = [];\r\n            for (let i = 0; i < hexArray.length; i++) {\r\n                argbArray.push(parseInt(hexArray[i], 16));\r\n            }\r\n\r\n            return new Microsoft.Maps.Color(argbArray[0], argbArray[1], argbArray[2], argbArray[3]);\r\n        }\r\n\r\n        private parseStyle(styleDom: JQuery): Microsoft.Maps.IPrimitiveOptions {\r\n            const styleOptions: any = {};\r\n\r\n            const polyStyle = styleDom.find('PolyStyle');\r\n            if (polyStyle.length > 0) {\r\n                const color = polyStyle.find('color');\r\n                if (color.length > 0) {\r\n                    styleOptions.fillColor = this.parseColor(color.html());\r\n                }\r\n            }\r\n\r\n            const lineStyle = styleDom.find('LineStyle');\r\n            if (lineStyle.length > 0) {\r\n                const color = lineStyle.find('color');\r\n                if (color.length > 0) {\r\n                    styleOptions.strokeColor = this.parseColor(color.html());\r\n                }\r\n                const width = lineStyle.find('width');\r\n                if (width.length > 0) {\r\n                    styleOptions.strokeThickness = parseInt(width.html(), 10);\r\n                }\r\n            }\r\n\r\n            const iconStyle = styleDom.find('IconStyle');\r\n            if (iconStyle.length > 0) {\r\n                const color = iconStyle.find('color');\r\n                if (color.length > 0) {\r\n                    styleOptions.color = color.html();\r\n                }\r\n\r\n                const icon = iconStyle.find('Icon');\r\n                if (icon.length > 0) {\r\n                    styleOptions.icon = icon.find('href').html();\r\n                }\r\n\r\n            }\r\n            return styleOptions;\r\n        }\r\n\r\n        /**\r\n         * Create a map of style names to styles (PolygonOptions - http://msdn.microsoft.com/en-us/library/gg427596.aspx).\r\n         * @param kmlDom\r\n         * @private\r\n         */\r\n        private parseStyles(kmlDom: JQuery): void {\r\n            kmlDom.find('Style').each((index: number, styleXml: Element) => {\r\n                const styleDom = $(styleXml);\r\n                const styleId: string = styleDom.attr('id');\r\n                this.styles[styleId] = this.parseStyle(styleDom);\r\n            });\r\n\r\n            kmlDom.find('StyleMap').each((index: number, styleMapXml: Element) => {\r\n                const styleMapDom = $(styleMapXml);\r\n                const styleMapId = styleMapDom.attr('id');\r\n                this.styleMap[styleMapId] = this.parseStyleMap(styleMapDom);\r\n            });\r\n\r\n            console.log('Styles loaded');\r\n        }\r\n\r\n        private parseStyleMap(styleMapDom: JQuery): IStyleMap {\r\n            const styles: any = {};\r\n\r\n            const self = this;\r\n            styleMapDom.find('Pair').each((index: number, pair: Element) => {\r\n                const pairDom = $(pair);\r\n                const key = pairDom.find('key').html();\r\n                const style = pairDom.find('styleUrl').html().substr(1);\r\n                styles[key] = self.styles[style];\r\n            });\r\n\r\n            return styles;\r\n        }\r\n\r\n        private addMappedStyle(geometry: Microsoft.Maps.IPrimitive, mapped: IStyleMap): void {\r\n            if (!geometry.metadata) {\r\n                geometry.metadata = {};\r\n            }\r\n            geometry.metadata.styles = mapped;\r\n\r\n            Microsoft.Maps.Events.addHandler(geometry, 'mouseover', (event: Microsoft.Maps.IMouseEventArgs) => {\r\n                const target: Microsoft.Maps.IPrimitive = <Microsoft.Maps.IPrimitive>event.target;\r\n                target.setOptions(<Microsoft.Maps.IPrimitiveOptions>target.metadata.styles.highlight);\r\n            });\r\n            Microsoft.Maps.Events.addHandler(geometry, 'mouseout', (event: Microsoft.Maps.IMouseEventArgs) => {\r\n                const target: Microsoft.Maps.IPrimitive = <Microsoft.Maps.IPrimitive>event.target;\r\n                target.setOptions(<Microsoft.Maps.IPrimitiveOptions>target.metadata.styles.normal);\r\n            });\r\n        }\r\n\r\n        private getOptions(placemarkDom: JQuery, defaultOptions: any): IStyleDTO {\r\n            let styleMap: IStyleMap;\r\n\r\n            const styleUrlDom: JQuery = placemarkDom.find('styleUrl');\r\n            if (styleUrlDom.length > 0) {\r\n                const styleUrl = styleUrlDom.html();\r\n                let styleName = this.getStyleName(styleUrl);\r\n\r\n                if (this.isExternalStyle(styleUrl)) {\r\n                    this.loadExternalStyle(styleUrl);\r\n                }\r\n\r\n                defaultOptions = this.styleMap[styleName];\r\n\r\n                if (defaultOptions) {\r\n                    styleMap = <IStyleMap>defaultOptions;\r\n                } else {\r\n                    defaultOptions = this.styles[styleName];\r\n                }\r\n            } else {\r\n                const style = placemarkDom.find('Style');\r\n                if (style.length > 0) {\r\n                    defaultOptions = this.parseStyle(style);\r\n                }\r\n            }\r\n\r\n            const name = placemarkDom.find('name');\r\n            if (name.length > 0) {\r\n                defaultOptions.title = name.html();\r\n            }\r\n            return {options: defaultOptions, styleMap: styleMap};\r\n        }\r\n\r\n        private getStyleName(styleUrl: string): string {\r\n            const index = styleUrl.lastIndexOf('#');\r\n            return styleUrl.substr(index + 1);\r\n        }\r\n\r\n        private isExternalStyle(styleUrl: string): boolean {\r\n            const index = styleUrl.lastIndexOf('#');\r\n            return index > 0;\r\n        }\r\n\r\n        private loadExternalStyle(styleUrl: string): void {\r\n            const styleName = this.getStyleName(styleUrl);\r\n            const style = this.styles[styleName];\r\n            if (style) {\r\n                return;\r\n            }\r\n\r\n            const index = styleUrl.lastIndexOf('#');\r\n            const externalKmlUrl = styleUrl.substring(0, index);\r\n\r\n            $.ajax({\r\n                url: externalKmlUrl,\r\n                async: false\r\n            }).then(\r\n                (data: any) => {\r\n                    const kmlContent = $(data);\r\n                    const externalStyles: JQuery = kmlContent.find('Style');\r\n                    for (let i = 0; i < externalStyles.length; i++) {\r\n                        const styleDom = $(externalStyles[i]);\r\n                        if (styleDom.attr('id') === styleName) {\r\n                            this.styles[styleName] = this.parseStyle(styleDom);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n        }\r\n\r\n        /**\r\n         * public functions that are available using this object.\r\n         */\r\n        public parse(kmlXml: Element): IBingKmlResult {\r\n            const kmlDom = $(kmlXml);\r\n\r\n            this.parseStyles(kmlDom);\r\n\r\n            const kmlContent: Array<Microsoft.Maps.IPrimitive> = [];\r\n            kmlDom.find('Placemark').each((index: number, placemarkXml: Element) => {\r\n                const placemarkGeometries: Array<Microsoft.Maps.IPrimitive> = this.parsePlacemark(placemarkXml);\r\n                if (placemarkGeometries) {\r\n                    $.each(placemarkGeometries, (j: number, item: Microsoft.Maps.IPrimitive) => {\r\n                        kmlContent.push(item);\r\n                    });\r\n                }\r\n            });\r\n\r\n            console.log('Geometry loaded');\r\n\r\n            const kmlOverlays: Microsoft.Maps.CustomOverlay[] = [];\r\n            kmlDom.find('GroundOverlay').each((index: number, groundOverlayXml: Element) => {\r\n                const overlay: Microsoft.Maps.CustomOverlay = this.parseGroundOverlay(groundOverlayXml);\r\n                if (overlay) {\r\n                    kmlOverlays.push(overlay);\r\n                }\r\n            });\r\n\r\n            console.log('Overlays loaded');\r\n\r\n            return {\r\n                geometries: kmlContent,\r\n                overlays: kmlOverlays\r\n            };\r\n        }\r\n    }\r\n\r\n    Microsoft.Maps.moduleLoaded('BingKmlParser');\r\n}\r\n"],"sourceRoot":"/source/"}